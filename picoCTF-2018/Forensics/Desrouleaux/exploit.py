#!/usr/bin/env python
#Desrouleaux

import json
from pwn import *

def main():

    """ Opening and reading the Json File """
    with open('incidents.json', 'r') as infile:
        json_string = json.load(infile)

    answer = 1.00

    while True:
        remote_host = remote('2018shell.picoctf.com', '63299')
        print remote_host.recvuntil('questions') + '\n'

        """ Question One """
        question_1 = remote_host.recvuntil('ones.').strip()
        print 'First Question is {}'.format(question_1)

        source_ip_list = []
        for value in json_string['tickets']:
            source_ip_list.append(value['src_ip'])
        
        most_common_source_ip = max(set(source_ip_list), key=source_ip_list.count)
        print most_common_source_ip
        remote_host.send(most_common_source_ip + '\n')
        remote_host.recv()
        print 'Result: {}'.format(remote_host.recvline())
        remote_host.recvline(); remote_host.recvline()

        """ Question Two """
        question_2 = remote_host.recvuntil('?')
        print 'Second Question is: {}'.format(question_2)
        # Regular Expression Magic
        ip_adress = re.findall(r'[0-9]+(?:\.[0-9]+){3}', question_2)
        unique_destination_ip_addresses = []
        for value in json_string['tickets']:
            if (value['src_ip'] == ip_adress.__getitem__(0)
            and value['dst_ip'] not in unique_destination_ip_addresses):
                unique_destination_ip_addresses.append(value['dst_ip'])
        
        print str(len(unique_destination_ip_addresses))
        remote_host.send(str(len(unique_destination_ip_addresses)) + '\n')
        remote_host.recv()
        print 'Result: {}'.format(remote_host.recvline())
        remote_host.recvline(); remote_host.recvline()

        """ Question Three"""
        question_3 = remote_host.recvuntil('places.')
        print 'Third Question is: {}'.format(question_3)

        print '{:.2f}'.format(answer)
        remote_host.send('{:.2f}'.format(answer) + '\n')
        remote_host.recv()
        result = remote_host.recvline()
        print 'Result: {}'.format(result)

        if result == 'Correct!\n':
            print remote_host.recv()
            break
        elif result == 'Incorrect!\n':
            remote_host.close()
            print "\nAnswer is incorrect retrying after 2 sec ...\n"
            time.sleep(2)
            answer += 0.01
            continue

if __name__ == '__main__':
    main()